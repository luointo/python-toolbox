# -*- coding: utf-8 -*-
__author__ = 'luointo'

"""
f.read(size)
    读取一定大小的数据, 然后作为字符串或字节对象返回。
    size是一个可选的数字类型的参数，用于指定读取的数据量。
    当size被忽略了或者为负值，那么该文件的所有内容都将被读取并且返回。

f.readline()
    从文件中读取一行n内容。换行符为'\n'。
    如果返回一个空字符串，说明已经已经读取到最后一行。
    这种方法，通常是读一行，处理一行，并且不能回头，只能前进，读过的行不能再读了。

f.readlines()
    将文件中所有的行，一行一行全部读入一个列表内，按顺序一个一个作为列表的元素，并返回这个列表。
    readlines方法会一次性将文件全部读入内存，所以也存在一定的风险。但是它有个好处，每行都保存在列表里，可以随意存取。
    如果设置可选参数 sizehint, 则读取指定长度的字节, 并且将这些字节按行分割
    
f.write()
    将字符串或bytes类型的数据写入文件内。
    write()动作可以多次重复进行，其实都是在内存中的操作，并不会立刻写回硬盘，直到执行close()方法后，才会将所有的写入操作反映到硬盘上。
    在这过程中，如果想将内存中的修改，立刻保存到硬盘上，可以使用f.flush()方法，但这可能造成数据的不一致。
    
f.writelines()
    用于向文件中写入一序列的字符串
    这一序列字符串可以是由迭代对象产生的，如一个字符串列表
    换行需要制定换行符 \n
    
f.tell()
    返回文件读写指针当前所处的位置,它是从文件开头开始算起的字节数。一定要注意了，是字节数，不是字符数。
    
f.seek()
    如果要改变位置指针的位置, 可以使用f.seek(offset, from_what)方法。seek()经常和tell()方法配合使用。
    from_what的值，如果是0表示从文件开头计算，如果是1表示从文件读写指针的当前位置开始计算，2表示从文件的结尾开始计算，默认为0
    offset：表示偏移量。
        seek(x,0) ： 从起始位置即文件首行首字符开始移动 x 个字符（移动当文件第p个字节处，绝对位置）
        seek(x,1) ： 表示从当前位置往后移动x个字符（移动到相对于当前位置之后的p个字节）
        seek(-x,2)：表示从文件的结尾往前移动x个字符（移动到相对文章尾之后的p个字节） 
        
f.flush()
    刷新文件内部缓冲，直接把内部缓冲区的数据立刻写入文件, 而不是被动的等待输出缓冲区写入        

f.close()
    关闭文件对象。当处理完一个文件后，调用f.close()来关闭文件并释放系统的资源。
    文件关闭后，如果尝试再次调用该文件对象，则会抛出异常。
    忘记调用close()的后果是数据可能只写了一部分到磁盘，剩下的丢失了，或者更糟糕的结果。
    也就是说大象塞进冰箱后，一定不要忘记关上冰箱的门。
    
with关键字
    with关键字用于Python的上下文管理器机制。
    为了防止诸如open这一类文件打开方法在操作过程出现异常或错误，或者最后忘了执行close方法，文件非正常关闭等可能导致文件泄露、破坏的问题。
    Python提供了with这个上下文管理器机制，保证文件会被正常关闭。在它的管理下，不需要再写close语句。注意缩进。
    
    with支持同时打开多个文件：
        with open('log1') as obj1, open('log2','w') as obj2:
            s=obj1.read()
            obj2.write(s)
                
"""