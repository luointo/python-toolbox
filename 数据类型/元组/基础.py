# -*- coding: utf-8 -*-
__author__ = 'luointo'

"""
元组 tuple
元组与列表类似，不同之处在于元组的元素不能修改
元组使用小括号，列表使用方括号
元组创建很简单，只需要在括号中添加元素，并使用逗号隔开即可
元组中只包含一个元素时，需要在元素后面添加逗号，否则括号会被当作运算符使用
元组只保证它的一级子元素不可变，对于嵌套的元素内部，不保证不可变！

元组与列表相同的操作：

使用方括号加下标访问元素
    切片（形成新元组对象）
    count()/index()
    len()/max()/min()/tuple()

元组中不允许的操作，确切的说是元组没有的功能：
    修改、新增元素
    删除某个元素（但可以删除整个元组）
    所有会对元组内部元素发生修改动作的方法。例如，元组没有remove，append，pop等方法。

"""

# 创建空元组
t = ()

# 修改元组
# 元组中的元素值是不允许修改的，但我们可以对元组进行连接组合
tup1 = (12, 34.56)
tup2 = ('abc', 'xyz')
# 以下修改元组元素操作是非法的。
# tup1[0] = 100
# 创建一个新的元组
tup3 = tup1 + tup2
print(tup3)

# 删除元组
# 元组中的元素值是不允许删除的，但我们可以使用del语句来删除整个元组
tup = ('a', 'b', 1, 2)
print(tup)
del tup
print("删除后的元组 tup : ")

# 与字符串一样，元组之间可以使用 + 号和 * 号进行运算。这就意味着他们可以组合和复制
tup1 = (1, 2, 3)
tup2 = (4, 5)
print("计算元素个数:", len(tup1))
print("连接:", tup1 + tup2)
print("复制:", tup1 * 3)
print("元素是否存在:", 3 in tup1)

# 元组索引，截取
tup_data = ('a', 'b', 'c', 'd')
print(tup_data[2])  # 读取第三个元素
print(tup_data[-2])  # 反向读取；读取倒数第二个元素
print(tup_data[1:])  # 截取元素，从第二个开始后的所有元素
